Team TBD - Traffic Simulation
Colin Hamilton, Graham Goudeau, Eric Bailey
Due Dec 11, 2015

Guide to files and contents:
-In order to make everything simpler, we decided to make everything just be in
 one main directory.
-Description of files and their contents:
    car.py
        Controlling logic for car behavior. Includes the parameters for driver
        behavior and an __update_status__() method that handles movement and
        updating state.  At each update, changes position based on velocity,
        velocity based on acceleration, and acceleration based on upcoming
        obstacles.
    edge.py
        Abstract class for the "edges" of the road network (the roads).
    graphics.py
        Used to interact with the pygame module, exports a Window class and a
        Sprite class that inherits from the pygame sprite object.
    graph.py
        Used by the car module to build a representation of the road network and
        perform Dijkstra's algorithm to find the shortest distance to the given
        destination (measured by road length).
    intersection.py
        Maintains the mutex that prevents multiple cans from being in an
        intersection at a time.  Each intersection is a vertex, so it has a list
        of incoming/outgoing roads.
    main.py
        Sets up the road network and interacts with the master object to add
        road network elements.
    master.py
        Maintains sets of intersections, sources, and destinations, and manages
        updating sprites for the objects under its control.
    road.py
        Maintains a list of cars currently on the road, and has a property for
        its speed limit.  It uses a mutex to ensure that car removal and
        addition is thread-safe.
    source.py
        Contains two classes:
        Source: Given an outgoing road and an initial time interval, it
            maintains a thread that spawns cars within a random distribution
            around that time interval.
        Destination: Given an incoming road, it adds itself to the set of
            destinations (kept track of in master) that cars can choose from
            when being spawned. "Consumes" arriving cars.
    vertex.py
        The abstract class for the "vertices" of the road network, such as the
        intersections, sources, destinations, etc.


Dependencies:
-Pygame
    -Installation: https://bitbucket.org/pygame/pygame/wiki/VersionControl 
                   (must install Mercurial, a version control system, to get
                    this to work)

Instructions on running:
-Just run "python main.py", and if you have pygame installed, it should work!

